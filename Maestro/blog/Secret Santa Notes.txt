Secret Santa Next Steps

Design website workflow

-Sign in
-Register
-Sign out

-Profile Page
-Edit Profile Page

-Create Event
-Edit Event
-Manage Events



Create pages based on workflow
-Mostly Done. May need a few more, but will continue building in Ruby on Rails.

Create database
-Using ruby on rails.

Tables:
Users table first migration columns:
-email
-encrypted_password
-reset_password_token
-reset_password_sent_at
-remember_created_at (created at time)
-sign_in_count
-current_sign_in_at
-last_sign_in_at
-current_sign_in_ip
-last_sign_in_ip

Second migration added on columns:
-first_name
-last_name

CMD code:
rails generate migration AddNamesToUsers first_name:string last_name:string
Migrate code modifications:
Added (null: false, default: "") to first and last names
File modifications:
Modified controllers/application_controller.rb
Modified models/user.rb
Modified view/devise/registrations/edit.html.erb
Modified view/devise/registrations/new.html.erb

Events
-name
-description
-type (secret santa)
-street_address
-apartment_number (optional)
-city
-date
-time
-password
-user (foreign key)

CMD code:
rails g migration CreateEvents name:string description:text type:integer street_address:string apartment_number:integer city:string date:date time:time password:string user:references

Modified migration code.

CMD code:
db:migrate
rails g model Event --skip-migration

Modified routes.rb.

Added user controller, users helper, users controller test, users coffee javascript asset, users scss stylesheet asset, users folder in views, and views/users/index.html.erb.

CMD code:
rails g controller Events

Adding views. Modified controller.


This is where I stopped. Got caught up  on modifying views and changing validation. Got stuck on validation. Will have to come back to this later.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Validation complete for time and date. Syntax was incorrect, and I was comparing integers to strings, instead of strings to strings.



Guests
-first_name - not null
-last_name - not null
-email - unique
-barcode - unique - to uniquely identify guests. guests invited to multiple events will need to have the same barcode


CMD code:
rails g migration CreateGuests first_name:string last_name:string email:string


Guest table not needed.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Users can create other users. When this happens, server creates a randomized password for the new users, and sends this password to their email.
Users can see events that they are guests for, and users can see events that they own.



Join table between Events and Users
-event_id
-user_id

--A user sees events that are available to them, through the join table. 


CMD code:
rails g migration CreateJoinTableEventUser event user

Modified migration code. Added both indexes.

Ran rails db:migrate.


Routes
[GET] Add guests page.  (new) -add multiple guests
[GET] Show guests page. (index)
[POST] (create)
[POST] (destroy)

Routes completed.

Controller: modify. Added actions.
Controller: added join method for display action.
Views: added display view. Might be complete. Added new view.


TODO:
Controller: test display action. Add logic for new, create and destroy actions.
Views: Complete new view. Allow multiple users to be added at the same time. (Dynamically adding form inputs.)




Page Notes:
My Profile page
-to cancel account, user should have to input their password
-to access events, users must be logged in, or input an event password

Event model
-time, date, and apartment validations.



Thoughts:
-Guests will be sent an email with event password and user barcode, so they can view the event.
-New table that holds event rules (which people don't get other people in event)
-Guests won't get an email saying who they got. Forced to enter site, for traffic purposes.
-Perhaps guests should be asked to confirm, before the event is started. Perhaps not though.
-Event guests will be a new resource. Users should be able to add guests a bunch at a time.
-Event should have a state field, for created, completed, and archived.


